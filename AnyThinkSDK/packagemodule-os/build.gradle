import com.android.annotations.NonNull
import com.android.manifmerger.ManifestMerger2
import com.android.manifmerger.ManifestMerger2.Invoker
import com.android.manifmerger.ManifestMerger2.MergeType
import com.android.manifmerger.MergingReport
import com.android.manifmerger.XmlDocument
import com.android.utils.ILogger
import com.google.common.base.Charsets
import com.google.common.io.Files

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-android.txt'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}



task cpClassOnProject  {
    doLast {
        delete buildDir.absolutePath + '/outputs/temp'
        println '================= cpClassOnProject ==============='

        copy {
            from rootProject.project(":core").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        copy {
            from rootProject.project(":myoffer").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        copy {
            from rootProject.project(":native").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        copy {
            from rootProject.project(":rewardvideo").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        //banner
        copy {
            from rootProject.project(":banner").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        //interstitial
        copy {
            from rootProject.project(":Interstitial").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        //splashad
        copy {
            from rootProject.project(":splashad").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        copy {
            from rootProject.project(":network").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }


        copy {
            from rootProject.project(":hibid").buildDir.absolutePath + '/intermediates/javac/release/compileReleaseJavaWithJavac/classes'
            into buildDir.absolutePath + '/outputs/temp'
        }

        File baseProguardFile = new File(projectDir.absolutePath + "/proguard-android-base.txt")
        File targetProguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        String baseText = baseProguardFile.getText("utf-8")
        targetProguardFile.write(baseText, "utf-8")


    }

}

task cpResourceProject  {

    doLast {
        copy {
            from rootProject.project(":core").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_core'
        }

        copy {
            from rootProject.project(":myoffer").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_core'
        }

        copy {
            from rootProject.project(":native").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_native'
        }

        copy {
            from rootProject.project(":network").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_network'
        }

        copy {
            from rootProject.project(":hibid").buildDir.absolutePath + '/../src/main/res/'
            into buildDir.absolutePath + '/../../outputs/res_hibid'
        }
    }
}

task getJar(type: Jar) {
    println '=================== getJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_sdk_debug.jar'
    destinationDir file(buildDir.absolutePath + '/outputs/jar')
    from(buildDir.absolutePath + '/outputs/temp')
    exclude "**/R.class", "**/R\$*.class", "**/BuildConfig.class"
}

task proguardJar(type: proguard.gradle.ProGuardTask) {
    println '================= proguardJar ==============='
    def local_properties = rootDir.absolutePath + '/local.properties'
    def properties = new Properties()
    properties.load(new FileInputStream(local_properties))
    def androidSDKDir = properties.getProperty('sdk.dir')
    def androidJarDir = androidSDKDir.toString() + '/platforms/android-28/android.jar'
    println androidSDKDir
    injars buildDir.absolutePath + '/outputs/jar/anythink_sdk_debug.jar'
    outjars buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar'
    //libraryjars
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    libraryjars(androidJarDir)

    // proguard
    configuration 'proguard-rules.pro'
}

task unzip(type: Copy) {
    def zipFile = file(buildDir.absolutePath + '/../../outputs/jar/anythink_sdk_release.jar')
    def outputDir = file(buildDir.absolutePath + '/../../outputs/classes')
    from zipTree(zipFile)
    into outputDir
}

task removeFiles  {
    doLast {
        delete buildDir.absolutePath + '/../../outputs'
    }
}

task makeCoreJar(type: Jar) {
    println '=============== makeCoreJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_core.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/core/**/*.class", "com/anythink/myoffer/**/*.class", "com/anythink/network/myoffer/**/*.class"
}


task makeRewardedVideoJar(type: Jar) {
    println '=============== makeRewardedVideoJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_rewardedvideo.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/rewardvideo/**/*.class"
}

task makeNativeJar(type: Jar) {
    println '=============== makeNativeJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_nativead.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/nativead/**/*.class"
}

task makeBannerJar(type: Jar) {
    println '=============== makeBannerJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_banner.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/banner/**/*.class"
}

task makeInterstitialJar(type: Jar) {
    println '=============== makeInterstitialJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_interstitial.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/interstitial/**/*.class"
}

task makeSplashAdJar(type: Jar) {
    println '=============== makeSplashAdJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_splash.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/splashad/**/*.class"
}

task makeHibidJar(type: Jar) {
    println '=============== makeHibidJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_headbidding.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/hb/**/*.class"
}

task makeNetworkFBJar(type: Jar) {
    println '=============== makeNetworkFBJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_facebook.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/facebook/**/*.class"
}

task makeNetworkAdmobJar(type: Jar) {
    println '=============== makeNetworkAdmobJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_admob.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/admob/**/*.class"
}

task makeNetworkApplovinJar(type: Jar) {
    println '=============== makeNetworkApplovinJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_applovin.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/applovin/**/*.class"
}

task makeNetworkFlurryJar(type: Jar) {
    println '=============== makeNetworkFlurryJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_flurry.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/flurry/**/*.class"
}

task makeNetworkInmobiJar(type: Jar) {
    println '=============== makeNetworkInmobiJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_inmobi.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/inmobi/**/*.class"
}

task makeNetworkMintegralJar(type: Jar) {
    println '=============== makeNetworkMintegralJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_mintegral.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/mintegral/**/*.class"
}

task makeNetworkMopubJar(type: Jar) {
    println '=============== makeNetworkMopubJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_mopub.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/mopub/**/*.class"
}

task makeNetworkGDTJar(type: Jar) {
    println '=============== makeNetworkGDTJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_gdt.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/gdt/**/*.class"
}

task makeNetworkAdcolonyJar(type: Jar) {
    println '=============== makeNetworkAdcolonyJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_adcolony.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/adcolony/**/*.class"
}

task makeNetworkChartboostJar(type: Jar) {
    println '=============== makeNetworkChartboostJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_chartboost.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/chartboost/**/*.class"
}

task makeNetworkIronsourceJar(type: Jar) {
    println '=============== makeNetworkIronsourceJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ironsource.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/ironsource/**/*.class"
}

task makeNetworkTapjoyJar(type: Jar) {
    println '=============== makeNetworkTapjoyJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_tapjoy.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/tapjoy/**/*.class"
}

task makeNetworkUnitadsJar(type: Jar) {
    println '=============== makeNetworkUnitadsJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_unityads.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/unityads/**/*.class"
}

task makeNetworkVungleJar(type: Jar) {
    println '=============== makeNetworkVungleJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_vungle.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/vungle/**/*.class"
}

task makeNetworkTouTiaoJar(type: Jar) {
    println '=============== makeNetworkTouTiaoJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_toutiao.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/toutiao/**/*.class"
}

task makeNetworkOnewayJar(type: Jar) {
    println '=============== makeNetworkOnewayJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_oneway.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/oneway/**/*.class"
}

task makeNetworkUniplayJar(type: Jar) {
    println '=============== makeNetworkUniplayJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_uniplay.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/uniplay/**/*.class"
}

task makeNetworkKsyunJar(type: Jar) {
    println '=============== makeNetworkKsyunJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ksyun.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/ksyun/**/*.class"
}


task makeNetworkAppnextJar(type: Jar) {
    println '=============== makeNetworkAppnextJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_appnext.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/appnext/**/*.class"
}

task makeNetworkBaiduJar(type: Jar) {
    println '=============== makeNetworkBaiduJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_baidu.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/baidu/**/*.class"
}

task makeNetworkNendJar(type: Jar) {
    println '=============== makeNetworkNendJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_nend.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/nend/**/*.class"
}

task makeNetworkMaioJar(type: Jar) {
    println '=============== makeNetworkMaioJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_maio.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/maio/**/*.class"
}

task makeNetworkStartAppJar(type: Jar) {
    println '=============== makeNetworkStartAppJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_startapp.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/startapp/**/*.class"
}

task makeNetworkSuperawesomeJar(type: Jar) {
    println '=============== makeNetworkSuperawesomeJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
    archiveName = 'anythink_network_superawesome.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/awesome/**/*.class"
}

task makeNetworkLuomiJar(type: Jar) {
    println '=============== makeNetworkLuomiJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_luomi.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/luomi/**/*.class"
}

task makeNetworkKSJar(type: Jar) {
    println '=============== makeNetworkKSJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ks.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/ks/**/*.class"
}

task makeNetworkSigmobJar(type: Jar) {
    println '=============== makeNetworkSigmobJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_sigmob.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/sigmob/**/*.class"
}

task makeNetworkOguryJar(type: Jar) {
    println '=============== makeNetworkOguryJar ==============='
    baseName 'anythink'
    appendix = 'dex'
    version = '1.0.0'
    classifier = 'release'
    extension = 'jar'
    archiveName = 'anythink_network_ogury.jar'
    destinationDir file(buildDir.absolutePath + '/../../outputs/libs')
    from(buildDir.absolutePath + '/../../outputs/classes')
    include "com/anythink/network/ogury/**/*.class"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    File file = new File(projectDir.absolutePath + "/libs/anythink_network_oneway.jar")
    if (file.exists()) {
        implementation 'com.android.support:appcompat-v7:28.0.0'
    }

}


/**Core and MyOffer**/
task makeCoreAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_core.jar"
        }

        copy {
            from projectDir.absolutePath + '/../outputs/res_core/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":core").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));
        libraryManifestList.add(file(rootProject.project(":myoffer").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_core.xml"));
    }
}

task outputCoreAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_core.aar')
            }
        }
    }
}

task makeNativeAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_nativead.jar"
        }
        copy {
            from projectDir.absolutePath + '/../outputs/res_native/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":native").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_native.xml"));
    }
}

task outputNativeAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_native.aar')
            }
        }
    }
}

task makeRewardedVideoAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_rewardedvideo.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":rewardvideo").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_rewardvideo.xml"));
    }
}

task outputRewardedVideoAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_rewardvideo.aar')
            }
        }
    }
}

//banner
task makeBannerAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_banner.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":banner").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_banner.xml"));
    }
}

task outputBannerAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_banner.aar')
            }
        }
    }
}

//interstitial
task makeInterstitialAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_interstitial.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":Interstitial").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_interstitial.xml"));
    }
}

task outputInterstitialAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_interstitial.aar')
            }
        }
    }
}

//splashad
task makeSplashAdAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_splash.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":splashad").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_splash.xml"));
    }
}

task outputSplashAdAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_splash.aar')
            }
        }
    }
}

//headbidding
task makeHeadBiddingAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_headbidding.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":hibid").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_hibid.xml"));
    }
}

task outputHeadBiddingAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_headbidding.aar')
            }
        }
    }
}

task makeNetworkFBAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_facebook.jar"
        }


        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_facebook.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "facebook" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkAdmobAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_admob.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_admob.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "admob" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkApplovinAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_applovin.jar"
        }

        copy {
            from projectDir.absolutePath + '/../outputs/res_network/'
            into projectDir.absolutePath + '/src/main/res'
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_applovin.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "applovin" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkFlurryAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_flurry.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_flurry.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "flurry" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkInmobiAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_inmobi.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_inmobi.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "inmobi" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkMintegralAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_mintegral.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_mintegral.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "mintegral_international" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkMopubAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_mopub.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'));

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_mopub.xml"));

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "mopub" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}



task makeNetworkGDTAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_gdt.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_gdt.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "gdt" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkAdColonyAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_adcolony.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_adcolony.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "adcolony" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkChartboostAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_chartboost.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_chartboost.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "chartboost" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkIronsourceAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_ironsource.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_ironsource.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "ironsource" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkTapjoyAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_tapjoy.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_tapjoy.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "tapjoy" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkUnityadsAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_unityads.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_unityads.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "unityads" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkVungleAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_vungle.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_vungle.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "vungle" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkTouTiaoAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_toutiao.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_toutiao.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "toutiao" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkOnewayAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_oneway.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_oneway.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "oneway" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkUniplayAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_uniplay.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_uniplay.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "uniplay" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkKsyunAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_ksyun.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_ksyun.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "ksyun" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}


task makeNetworkAppnextAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_appnext.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_appnext.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "appnext" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkBaiduAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_baidu.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_baidu.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "baidu" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkNendAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_nend.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_nend.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "nend" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkMaioAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_maio.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_maio.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "maio" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkStartAppAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_startapp.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_startapp.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "startapp" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkSuperAwesomeAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_superawesome.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_superawesome.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "superawesome" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkLuomiAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_luomi.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_luomi.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "luomi" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkKSAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_ks.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_ks.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "ks" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkSigmobAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_sigmob.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_sigmob.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "sigmob" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}

task makeNetworkOguryAARRes  {
    doLast {
        delete projectDir.absolutePath + "/libs"
        delete projectDir.absolutePath + "/src/main/res"
        copy {
            from projectDir.absolutePath + '/../outputs/libs/'
            into projectDir.absolutePath + '/libs'
            include "anythink_network_ogury.jar"
        }

        List<File> libraryManifestList = new ArrayList<>();
        libraryManifestList.add(file(rootProject.project(":network").projectDir.absolutePath + '/src/main/AndroidManifest.xml'))

        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest_ogury.xml"))

        /**proguard**/
        File proguardFile = file(projectDir.absolutePath + "/proguard-android-base.txt")
        StringBuffer proguardFileText = new StringBuffer()
        proguardFileText.append(proguardFile.getText("utf-8"));

        File netwprkProguardFile = new File(projectDir.absolutePath + '/../network_base/network/' + "ogury" + "/proguard-android.txt");
        if (netwprkProguardFile.exists()) {
            proguardFileText.append("\n")
            proguardFileText.append(netwprkProguardFile.getText("utf-8"))
        }
        File resultproguardFile = new File(projectDir.absolutePath + "/proguard-android.txt")
        resultproguardFile.write(proguardFileText.toString(), "utf-8")
    }
}


task outputNetworkFacebookAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_facebook.aar')
            }
        }
    }
}

task outputNetworkAdmobAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_admob.aar')
            }
        }
    }
}

task outputNetworkApplovinAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_applovin.aar')
            }
        }
    }
}

task outputNetworkFlurryAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_flurry.aar')
            }
        }
    }
}

task outputNetworkInmobiAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_inmobi.aar')
            }
        }
    }
}

task outputNetworkMintegralAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_mintegral.aar')
            }
        }
    }
}

task outputNetworkMopubAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_mopub.aar')
            }
        }
    }
}

task outputNetworkGDTAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_gdt.aar')
            }
        }
    }
}

task outputNetworkAdcolonyAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_adcolony.aar')
            }
        }
    }
}

task outputNetworkChartboostAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_chartboost.aar')
            }
        }
    }
}

task outputNetworkIronsourceAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_ironsource.aar')
            }
        }
    }
}

task outputNetworkTapjoyAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_tapjoy.aar')
            }
        }
    }
}

task outputNetworkUnityadsAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_unityads.aar')
            }
        }
    }
}

task outputNetworkVungleAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_vungle.aar')
            }
        }
    }
}

task outputNetworkTouTiaoAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_toutiao.aar')
            }
        }
    }
}

task outputNetworkOnewayAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_oneway.aar')
            }
        }
    }
}

task outputNetworkUniplayAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_uniplay.aar')
            }
        }
    }
}

task outputNetworkKsyunAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_ksyun.aar')
            }
        }
    }
}


task outputNetworkAppnextAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_appnext.aar')
            }
        }
    }
}

task outputNetworkBaiduAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_baidu.aar')
            }
        }
    }
}

task outputNetworkNendAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_nend.aar')
            }
        }
    }
}

task outputNetworkMaioAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_maio.aar')
            }
        }
    }
}

task outputNetworkStartAppAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_startapp.aar')
            }
        }
    }
}

task outputNetworkSuperAwesomeAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_superawesome.aar')
            }
        }
    }
}

task outputNetworkLuomiAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_luomi.aar')
            }
        }
    }
}

task outputNetworkKSAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_ks.aar')
            }
        }
    }
}

task outputNetworkSigmobAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_sigmob.aar')
            }
        }
    }
}

task outputNetworkOguryAAR  {
    doLast {
        copy {
            from buildDir.absolutePath + '/outputs/aar/packagemodule-os-release.aar'
            into projectDir.absolutePath + '/../outputs/aar/'
            rename { String fileName ->
                fileName.replace('packagemodule-os-release.aar', 'anythink_network_ogury.aar')
            }
        }
    }
}

//merge manifest
private void mergeManifest(List<File> libraryManifests, File originMaifestFile) {
    mergeManifest(libraryManifests,originMaifestFile, "", false);
}

private void mergeManifest(List<File> libraryManifests, File originMaifestFile, String networkName, boolean useOriginManifestFile){
    ILogger mLogger = new MiLogger()

    File reportFile = file(buildDir.absolutePath + "/embedManifestReport.txt")

    File aaptManifest = file(projectDir.absolutePath + "/src/main/AndroidManifest.xml")
    if (useOriginManifestFile) {
        aaptManifest = originMaifestFile
    }


    try {
        Invoker manifestMergerInvoker = ManifestMerger2.newMerger(originMaifestFile, mLogger, MergeType.APPLICATION)

        manifestMergerInvoker.addLibraryManifests(libraryManifests.toArray(new File[libraryManifests.size()]))

        // manifestMergerInvoker.setPlaceHolderValues(placeHolders)
        manifestMergerInvoker.setMergeReportFile(reportFile);

        MergingReport mergingReport = manifestMergerInvoker.merge();

        mLogger.info("Merging result:" + mergingReport.getResult());
        MergingReport.Result result = mergingReport.getResult();
        switch (result) {
            case MergingReport.Result.WARNING:
                mergingReport.log(mLogger);
        // fall through since these are just warnings.
            case MergingReport.Result.SUCCESS:
                XmlDocument xmlDocument = mergingReport.getMergedXmlDocument(MergingReport.MergedManifestKind.MERGED);
                try {
                    String annotatedDocument = mergingReport.getActions().blame(xmlDocument);
                    mLogger.verbose(annotatedDocument);
                } catch (Exception e) {
                    mLogger.error(e, "cannot print resulting xml");
                }
//                save(xmlDocument, origManifest);
//                mLogger.info("Merged manifest saved to " + origManifest);
                if (aaptManifest.exists()) {
//                    new PlaceholderEncoder().visit(xmlDocument);
                    save(xmlDocument, aaptManifest);
                    String manifestText = aaptManifest.getText()
                    if (networkName != null && !"".equals(networkName)) {
                        manifestText = manifestText.replaceAll("android:authorities=\"com.anythink.network." +networkName, "android:authorities=\"~\u007BapplicationId}")

                        manifestText = manifestText.replace('~', '$')

                        if("luomi".equals(networkName)){
                            manifestText = manifestText.replaceAll("com.anythink.network.luomi.fileprovider", "\u007BapplicationId}.fileprovider")
                        }
                    }

                    manifestText = manifestText.replaceAll("<uses-sdk android:minSdkVersion=\"14\" />", "")
                    aaptManifest.write(manifestText, "utf-8")


                    mLogger.info("Merged aapt safe manifest saved to " + aaptManifest);
                }
                break;
            case MergingReport.Result.ERROR:
                mergingReport.log(mLogger);
                throw new RuntimeException(mergingReport.getReportString());
            default:
                throw new RuntimeException("Unhandled result type : " + mergingReport.getResult());
        }
    } catch (RuntimeException e) {
        // Unacceptable error
        e.printStackTrace()
        throw new RuntimeException(e);
    }
}

private void save(XmlDocument xmlDocument, File out) {
    try {
        Files.write(xmlDocument.prettyPrint(), out, Charsets.UTF_8);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

class MiLogger implements ILogger {

    @Override
    void error(
            @com.android.annotations.Nullable Throwable t,
            @com.android.annotations.Nullable String msgFormat, Object... args) {
        System.err.println(String.format("========== ERROR : " + msgFormat, args))
        if (t) t.printStackTrace(System.err)
    }

    @Override
    void warning(@NonNull String msgFormat, Object... args) {
        System.err.println(String.format("========== WARNING : " + msgFormat, args))
    }

    @Override
    void info(@NonNull String msgFormat, Object... args) {
        System.out.println(String.format("========== INFO : " + msgFormat, args))
    }

    @Override
    void verbose(@NonNull String msgFormat, Object... args) {
        // System.out.println(String.format("========== DEBUG : " + msgFormat, args))
    }
}


task copyChinaNecessaryResPackage  {
    doLast {
        ArrayList<String> networkChinaLibsPath = new ArrayList<>();

        networkChinaLibsPath.add("baidu");
        networkChinaLibsPath.add("gdt");
        networkChinaLibsPath.add("ksyun");
        networkChinaLibsPath.add("luomi");
        networkChinaLibsPath.add("mintegral");
        networkChinaLibsPath.add("oneway");
        networkChinaLibsPath.add("toutiao");
        networkChinaLibsPath.add("uniplay");
        networkChinaLibsPath.add("ks");
        networkChinaLibsPath.add("sigmob")


        copy {
            from projectDir.absolutePath + '/../network_base/network/'
            into projectDir.absolutePath + '/../outputs/network_sdk/china'
            include 'baidu/**','gdt/**','ksyun/**','luomi/**','mintegral_china/**','oneway/**','toutiao/**','uniplay/**','ks/**','sigmob/**'
        }


        //Copy chinese netowrk adapter to the chinese folder
        for (String name : networkChinaLibsPath) {
            if (name.equals("mintegral")) {
                copy {
                    from projectDir.absolutePath + '/../outputs/aar/'
                    into projectDir.absolutePath + '/../outputs/network_sdk/china/' + name + '_china/libs'
                    include '*_network_' + name + '.aar'
                }
            } else {
                copy {
                    from projectDir.absolutePath + '/../outputs/aar/'
                    into projectDir.absolutePath + '/../outputs/network_sdk/china/' + name + '/libs'
                    include '*_network_' + name + '.aar'
                }
            }
        }


        //copy anythink package to chinese folder
        copy {
            from projectDir.absolutePath + '/../outputs/aar/'
            into projectDir.absolutePath + '/../outputs/china_sdk_release/libs'
            include '*_banner.aar','*_core.aar','*_headbidding.aar','*_interstitial.aar','*_native.aar','*_rewardvideo.aar','*_splash.aar','tramini_sdk_*.aar'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/network_sdk/china'
            into projectDir.absolutePath + '/../outputs/china_sdk_release/network_sdk'
        }

        //copy chinese package to release folder
        copy {
            from projectDir.absolutePath + '/../outputs/china_sdk_release'
            into projectDir.absolutePath + '/../outputs/TopOnSDKRelease/China'
        }

    }

}

task copyNonChinaNecessaryResPackage  {
    doLast {
        ArrayList<String> networkNonChinaLibsPath = new ArrayList<>();

        networkNonChinaLibsPath.add("adcolony");
        networkNonChinaLibsPath.add("admob");
        networkNonChinaLibsPath.add("applovin");
        networkNonChinaLibsPath.add("appnext");
        networkNonChinaLibsPath.add("chartboost");
        networkNonChinaLibsPath.add("facebook");
        networkNonChinaLibsPath.add("flurry");
        networkNonChinaLibsPath.add("inmobi");
        networkNonChinaLibsPath.add("ironsource");
        networkNonChinaLibsPath.add("maio");
        networkNonChinaLibsPath.add("mintegral");
        networkNonChinaLibsPath.add("mopub");
        networkNonChinaLibsPath.add("nend");
        networkNonChinaLibsPath.add("startapp");
        networkNonChinaLibsPath.add("superawesome");
        networkNonChinaLibsPath.add("tapjoy");
        networkNonChinaLibsPath.add("unityads");
        networkNonChinaLibsPath.add("vungle");
        networkNonChinaLibsPath.add("ogury")


        copy {
            from projectDir.absolutePath + '/../network_base/network/'
            into projectDir.absolutePath + '/../outputs/network_sdk/non-china'
            include 'adcolony/**','admob/**','applovin/**','appnext/**','chartboost/**','facebook/**','flurry/**','inmobi/**','ironsource/**','maio/**', 'mintegral_international/**','mopub/**','nend/**','startapp/**','superawesome/**', 'tapjoy/**','unityads/**','vungle/**','ogury/**'
        }

        //Copy non-china netowrk adapter to the non-china folder
        for (String name : networkNonChinaLibsPath) {
            if (name.equals("mintegral")) {
                copy {
                    from projectDir.absolutePath + '/../outputs/aar/'
                    into projectDir.absolutePath + '/../outputs/network_sdk/non-china/' + name + '_international/libs'
                    include '*_network_' + name + '.aar'
                }
            } else {
                copy {
                    from projectDir.absolutePath + '/../outputs/aar/'
                    into projectDir.absolutePath + '/../outputs/network_sdk/non-china/' + name + '/libs'
                    include '*_network_' + name + '.aar'
                }
            }

        }


        copy {
            from projectDir.absolutePath + '/../outputs/aar/'
            into projectDir.absolutePath + '/../outputs/non-china_sdk_release/libs'
            include '*_banner.aar','*_core.aar','*_headbidding.aar','*_interstitial.aar','*_native.aar','*_rewardvideo.aar','*_splash.aar','tramini_sdk_*.aar'
            exclude 'anythink_extra.aar'
        }


        copy {
            from projectDir.absolutePath + '/../outputs/network_sdk/non-china'
            into projectDir.absolutePath + '/../outputs/non-china_sdk_release/network_sdk'
        }

        //copy to the release folder
        copy {
            from projectDir.absolutePath + '/../outputs/non-china_sdk_release'
            into projectDir.absolutePath + '/../outputs/TopOnSDKRelease/NonChina'
        }
    }

}

task makeTopOnSDK(type: Zip){

    destinationDir = file(projectDir.absolutePath + '/../outputs/')
    archiveName = "TopOn_SDK_v${SDK_VERSION}_${releaseTime()}_Release.zip"
    from(projectDir.absolutePath + '/../outputs/TopOnSDKRelease') {
        into('')
    }
}


def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}



getJar.dependsOn 'cpClassOnProject'
removeFiles.dependsOn 'getJar'
proguardJar.dependsOn 'removeFiles'
unzip.dependsOn 'proguardJar'
makeCoreJar.dependsOn 'unzip'
makeNativeJar.dependsOn 'makeCoreJar'
makeRewardedVideoJar.dependsOn 'makeNativeJar'
makeBannerJar.dependsOn 'makeRewardedVideoJar'
makeInterstitialJar.dependsOn 'makeBannerJar'
makeSplashAdJar.dependsOn 'makeInterstitialJar'
makeHibidJar.dependsOn 'makeSplashAdJar'
makeNetworkFBJar.dependsOn 'makeHibidJar'
makeNetworkAdmobJar.dependsOn 'makeNetworkFBJar'
makeNetworkApplovinJar.dependsOn 'makeNetworkAdmobJar'
makeNetworkFlurryJar.dependsOn 'makeNetworkApplovinJar'
makeNetworkInmobiJar.dependsOn 'makeNetworkFlurryJar'
makeNetworkMintegralJar.dependsOn 'makeNetworkInmobiJar'
makeNetworkGDTJar.dependsOn 'makeNetworkMintegralJar'
makeNetworkMopubJar.dependsOn 'makeNetworkGDTJar'
makeNetworkAdcolonyJar.dependsOn 'makeNetworkMopubJar'
makeNetworkChartboostJar.dependsOn 'makeNetworkAdcolonyJar'
makeNetworkIronsourceJar.dependsOn 'makeNetworkChartboostJar'
makeNetworkTapjoyJar.dependsOn 'makeNetworkIronsourceJar'
makeNetworkUnitadsJar.dependsOn 'makeNetworkTapjoyJar'
makeNetworkVungleJar.dependsOn 'makeNetworkUnitadsJar'
makeNetworkTouTiaoJar.dependsOn 'makeNetworkVungleJar'
makeNetworkOnewayJar.dependsOn 'makeNetworkTouTiaoJar'
makeNetworkUniplayJar.dependsOn 'makeNetworkOnewayJar'
makeNetworkKsyunJar.dependsOn 'makeNetworkUniplayJar'
makeNetworkAppnextJar.dependsOn 'makeNetworkKsyunJar'
makeNetworkBaiduJar.dependsOn 'makeNetworkAppnextJar'
makeNetworkNendJar.dependsOn 'makeNetworkBaiduJar'
makeNetworkMaioJar.dependsOn 'makeNetworkNendJar'
makeNetworkStartAppJar.dependsOn 'makeNetworkMaioJar'
makeNetworkSuperawesomeJar.dependsOn 'makeNetworkStartAppJar'
makeNetworkLuomiJar.dependsOn 'makeNetworkSuperawesomeJar'
makeNetworkKSJar.dependsOn 'makeNetworkLuomiJar'
makeNetworkSigmobJar.dependsOn 'makeNetworkKSJar'
makeNetworkOguryJar.dependsOn 'makeNetworkSigmobJar'
cpResourceProject.dependsOn 'makeNetworkOguryJar'

outputCoreAAR.dependsOn 'assembleRelease'
outputNativeAAR.dependsOn 'assembleRelease'
outputRewardedVideoAAR.dependsOn 'assembleRelease'
outputBannerAAR.dependsOn 'assembleRelease'
outputInterstitialAAR.dependsOn 'assembleRelease'
outputSplashAdAAR.dependsOn 'assembleRelease'
outputHeadBiddingAAR.dependsOn 'assembleRelease'
outputNetworkFacebookAAR.dependsOn 'assembleRelease'
outputNetworkAdmobAAR.dependsOn 'assembleRelease'
outputNetworkApplovinAAR.dependsOn 'assembleRelease'
outputNetworkInmobiAAR.dependsOn 'assembleRelease'
outputNetworkFlurryAAR.dependsOn 'assembleRelease'
outputNetworkMintegralAAR.dependsOn 'assembleRelease'
outputNetworkMopubAAR.dependsOn 'assembleRelease'
outputNetworkGDTAAR.dependsOn 'assembleRelease'
outputNetworkAdcolonyAAR.dependsOn 'assembleRelease'
outputNetworkChartboostAAR.dependsOn 'assembleRelease'
outputNetworkIronsourceAAR.dependsOn 'assembleRelease'
outputNetworkTapjoyAAR.dependsOn 'assembleRelease'
outputNetworkUnityadsAAR.dependsOn 'assembleRelease'
outputNetworkVungleAAR.dependsOn 'assembleRelease'
outputNetworkTouTiaoAAR.dependsOn 'assembleRelease'
outputNetworkOnewayAAR.dependsOn 'assembleRelease'
outputNetworkUniplayAAR.dependsOn 'assembleRelease'
outputNetworkKsyunAAR.dependsOn 'assembleRelease'
outputNetworkAppnextAAR.dependsOn 'assembleRelease'
outputNetworkBaiduAAR.dependsOn 'assembleRelease'
outputNetworkNendAAR.dependsOn 'assembleRelease'
outputNetworkMaioAAR.dependsOn 'assembleRelease'
outputNetworkStartAppAAR.dependsOn 'assembleRelease'
outputNetworkSuperAwesomeAAR.dependsOn 'assembleRelease'
outputNetworkLuomiAAR.dependsOn 'assembleRelease'
outputNetworkKSAAR.dependsOn 'assembleRelease'
outputNetworkSigmobAAR.dependsOn 'assembleRelease'
outputNetworkOguryAAR.dependsOn 'assembleRelease'


copyNonChinaNecessaryResPackage.dependsOn 'copyChinaNecessaryResPackage'
makeTopOnSDK.dependsOn 'copyNonChinaNecessaryResPackage'
